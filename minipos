#!/usr/bin/env python3
# minipos - A self-hosted, 0-confirmation Bitcoin Cash point-of-sale server
# Author: Simon Volpert <simon@simonvolpert.com>
# Project page: https://github.com/simon-v/minipos/
# This program is free software, released under the Apache License, Version 2.0. See the LICENSE file for more information
# Consult the README file for usage instructions and other helpful hints

import os
os.environ["PYCOIN_NATIVE"]="openssl"
import sys
from wsgiref.simple_server import make_server
import urllib.parse
import datetime
import qrcode
import io
import random
import base64
import re
import pycoin.key

import bch # Local library file
import sendmail # Local library file

usage = '''Usage: minipos [DATA_DIRECTORY]
See the README file for more information.'''
config = {
	'addresses': [],
	'lock': {},
}

# Look for the directory containing the configuration files
lib_dir = os.path.dirname(os.path.abspath(__file__))
data_dir_locations = [
	os.path.join(os.path.expanduser('~'), '.minipos'),
	os.path.join(os.path.expanduser('~'), '.config', 'minipos'),
	lib_dir,
	os.getcwd()
]
if len(sys.argv) > 1:
	if sys.argv[1] == '-h' or sys.argv[1] == '--help':
		print(usage)
		sys.exit(0)
	else:
		data_dir_locations.insert(0, os.path.abspath(sys.argv[1]))
		if not os.path.isdir(data_dir_locations[0]):
			print('No such directory: ' + data_dir_locations[0])
for data_dir in data_dir_locations:
	try:
		os.chdir(data_dir)
	except (OSError, NotADirectoryError):
		continue
	if os.path.isfile('address.list'):
		print('Using {dir} as data directory'.format(dir=data_dir))
		break
# Read the address list
try:
	f = open('address.list', 'r')
	for line in f.readlines():
		_addr = line.strip()
		if _addr != '' and not _addr in config['addresses']:
			config['addresses'].append(_addr)
	f.close()
except (IOError, OSError, FileNotFoundError, PermissionError):
	print('Could not open address.list')
	sys.exit(2)
	
if config['addresses'] == []:
	print('No receiving addresses in address.list')
	sys.exit(2)

# xpub
pattern = re.compile("xpub")
if pattern.match(config['addresses'][0]):
  xpub = pycoin.key.Key.from_text(config['addresses'][0])
  # 0 => public addresses
  # 1 => change addresses, only for internal use
  account_type = 0
  xpub_subkey = xpub.subkey(account_type)
  index = 0
  addr_batch = []
  for index in range(0, 9):
    addr = xpub_subkey.subkey(index).bitcoin_address()
    addr_batch.append(addr)
    print(addr)

  config['addresses'] = addr_batch


# Load the config file
try:
	with open('minipos.cfg', 'r') as f:
		lines = f.readlines()
except (IOError, FileNotFoundError):
	print('No configuration file found, using defaults')
	lines = []
for line in lines:
	# Skip blank lines and comments
	if line.strip() == '' or line.startswith('#'):
		continue
	# Split to key and value pairs
	words = line.strip().split('=')
	key = words[0].strip()
	value = '='.join(words[1:]).strip()
	config[key] = value
# Sanitize the config file
try:
	config['taxrate'] = float(config['taxrate'])
except (KeyError, ValueError):
	config['taxrate'] = 0
if 'currencies' not in config:
	config['currencies'] = ['USD']
else:
	config['currencies'] = config['currencies'].split(',')
try:
	config['multiplier'] = float(config['multiplier'])
except (KeyError, ValueError):
	config['multiplier'] = 1
if 'week_start' not in config or config['week_start'] == 'monday':
	config['week_start'] = 0
elif config['week_start'] == 'sunday':
	config['week_start'] = 1
else:
	print("Invalid 'week_start' value, falling back to 'monday'")
try:
	config['port'] = int(config['port'])
except (KeyError, ValueError):
	config['port'] = 8080
if 'allowed_ips' not in config:
	config['allowed_ips'] = ['0.0.0.0']
else:
	config['allowed_ips'] = config['allowed_ips'].split(',')
try:
	config['welcome_timeout'] = int(config['welcome_timeout'])
	if config['welcome_timeout'] < 0:
		raise ValueError
except (KeyError, ValueError):
	config['welcome_timeout'] = 120
if 'label' not in config or config['label'] == '':
	config['label'] = 'MiniPOS'
if 'unit' not in config:
	config['unit'] = 'native'
else:
	if config['unit'] not in ['native', 'bits', 'satoshi']:
		print("Invalid 'unit' value, falling back to 'native'")
		config['unit'] = 'native'
if 'price_source' not in config:
	config['price_source'] = bch.exchanges[0]['name']
for k in ['custom_balance_key', 'custom_confirmed_key', 'custom_unconfirmed_key']:
	if k in config and config[k] == '':
		config[k] = None
if 'custom_unit_satoshi' in config:
	config['custom_unit_satoshi'] = True if config['custom_unit_satoshi'] in ['1', 'yes'] else False

# Utility wrapper function
def load_file(filename):
	try:
		src = open(os.path.join(data_dir, filename), 'r')
	except (IOError, OSError, FileNotFoundError, PermissionError):
		src = open(os.path.join(lib_dir, filename), 'r')
	data = src.read()
	src.close()
	return data

# Cast amount into preferred units
def format_amount(amount):
	if config['unit'] == 'bits':
		return bch.bits(float(amount))
	elif config['unit'] == 'satoshi':
		return str(int(float(amount) * 100000000))
	else:
		return amount


# Create a payment request QR page
def create_invoice(parameters):
	error = '''<!doctype html>
<head>
<meta http-equiv="refresh" content="5">
<title>Request Timed Out</title>
</head>
<body>
<h1>Request Timed Out</h1>
<p>Check the Internet connection of the MiniPOS server.</p>
<p>Trying again in 5 seconds...</p>
</body>
</html>'''
	noaddrs = '''<!doctype html>
<head>
<meta http-equiv="refresh" content="5">
<title>No Addresses Available</title>
</head>
<body>
<h1>No Addresses Available</h1>
<p>There are no free receiving addresses to process the request.</p>
<p>Trying again in 5 seconds...</p>
</body>
</html>'''
	if 'currency' not in parameters:
		parameters['currency'] = config['currencies']
	currency = parameters['currency'][0]
	fiat = float(parameters['amount'][0]) * config['multiplier']
	# Check for address lock timeout
	for k in config['lock'].keys():
		if check_lock_timeout(k):
			unlock_address(k)
	if len(config['addresses']) == 0:
		return noaddrs
	# Get the exchange rate
	try:
		price = bch.get_price(currency, config)
	except KeyboardInterrupt:
		raise
	except:
		print(sys.exc_info()[1])
		return error
	amount = bch.btc(fiat / price)
	# Use the next available address
	address = config['addresses'][0]
	lock_address(address)
	try:
		balance, unconfirmed = bch.get_balance(address, config=config, verify=True)
	except KeyboardInterrupt:
		raise
	except:
		print(sys.exc_info()[1])
		unlock_address(address)
		return error
	balance += unconfirmed
	# BEGIN DEBUG
	#balance -= float(amount)
	# END DEBUG
	tag = ''
	for i in range(7):
		tag += random.choice('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')
	label = urllib.parse.quote('%s ID:%s' % (config['label'], tag))
	data = 'bitcoincash:{addr}?amount={amt}&message={label}'.format(addr=address, amt=amount, label=label)
	image = qrcode.make(data, error_correction=qrcode.constants.ERROR_CORRECT_L)
	output = io.BytesIO()
	image.save(output)
	output = base64.b64encode(output.getvalue()).decode('UTF-8')
	filler = {
		'addr': address,
		'amt': format_amount(amount),
		'balance': balance,
		'qr': output,
		'request': data,
		'fiat': bch.fiat(fiat),
		'cur': currency,
		'price': bch.fiat(price),
		'tag': tag,
	}
	filler['token'] = 'BCH' if config['unit'] == 'native' else 'bits' if config['unit'] == 'bits' else 'satoshi'
	config['lock'][address]['amount'] = amount
	config['lock'][address]['fiat'] = filler['fiat']
	config['lock'][address]['currency'] = currency
	config['lock'][address]['balance'] = balance
	config['lock'][address]['tag'] = tag
	page = load_file('invoice.html').format(**filler)
	return page

# Find the address associated with the tag
def get_address_by_tag(parameters):
	try:
		for address in config['lock'].keys():
			if parameters['id'][0] == config['lock'][address]['tag']:
				return address
	except KeyError:
		pass

# API check if a payment was received
def check_payment(parameters):
	address = get_address_by_tag(parameters)
	if not address:
		return '-1'
	# Update address lock
	if check_lock_timeout(address):
		return '-1'
	lock_address(address)
	# Check address balance
	amount = float(config['lock'][address]['amount'])
	initial = float(config['lock'][address]['balance'])
	try:
		balance, unconfirmed = bch.get_balance(address, config=config, verify=True)
	except KeyboardInterrupt:
		raise
	except:
		print('Could not fetch balance: ' + str(sys.exc_info()[1]))
		return '0'
	if balance + unconfirmed >= initial + amount:
		record_payment(address)
		unlock_address(address)
		return '1'
	return '0'

# Write the details of the payment to a log file
def record_payment(address):
	fiat = config['lock'][address]['fiat']
	currency = config['lock'][address]['currency']
	amount = config['lock'][address]['amount']
	tag = config['lock'][address]['tag']
	log_dir = os.path.join(data_dir, 'logs')
	if not os.path.isdir(log_dir):
		os.mkdir(log_dir)
	logfile = os.path.join(log_dir, datetime.date.today().isoformat() + '.log')
	with open(logfile, 'a') as log:
		log.write('{date}	{addr}	{amt}	{fiat} {cur}	{tag}\n'.format(date=datetime.datetime.now().isoformat(), addr=address, amt=amount, fiat=fiat, cur=currency, tag=tag))

# Lock an address to prevent concurrent access
def lock_address(address):
	if address not in config['lock'].keys():
		config['lock'][address] = {'time': datetime.datetime.now()}
	if address in config['addresses']:
		del(config['addresses'][config['addresses'].index(address)])

# Free address lock
def unlock_address(address):
	if address in config['lock'].keys():
		config['addresses'].append(address)
		try:
			del(config['lock'][address])
		except KeyError:
			pass

# Check address lock timeout
def check_lock_timeout(address):
	if address not in config['lock'].keys():
		return True
	try:
		delta = datetime.datetime.now() - config['lock'][address]['time']
	except KeyError:
		return True
	if delta >= datetime.timedelta(seconds=60):
		return True
	return False

# Parse a log file and add its contents to the table
def read_log_file(filename, plaintext=False):
	table = ''
	totals = {}
	for currency in config['currencies']:
		totals[currency] = 0
	try:
		logfile = open(os.path.join(data_dir, filename), 'r')
	except:
		if sys.exc_info()[0] not in [IOError, OSError, FileNotFoundError, PermissionError]:
			print(sys.exc_info()[1])
		return {}, ''
	try:
		for line in logfile.readlines():
			line = line.strip().split('	')
			if len(line) == 4:
				line.append('')
			elif not len(line) == 5:
				raise ValueError
			date, address, amount, fiat, tag = line
			amount = format_amount(amount)
			fiat, currency = fiat.split(' ')
			totals[currency] += float(fiat)
			date = date.split('.')[0].replace('T', ' ')
			if plaintext:
				table += '{date}  {addr}...  {amt}  {fiat} {cur}  {tag}\n'.format(date=date, addr=address[0:10], amt=str(amount).rjust(12), fiat=str(fiat).rjust(15), cur=currency, tag=tag)
			else:
				table += '<tr><td>{date}</td><td>{addr}...</td><td>{amt}</td><td>{fiat} {cur}</td><td>{tag}</td></tr>\n'.format(date=date, addr=address[0:10], amt=amount, fiat=fiat, cur=currency, tag=tag)
	except:
		print('Log file is corrupted: {file} ({error})'.format(file=filename, error=sys.exc_info()[1]))
		msg = 'The log file for {file} is corrupted!'.format(file=filename.split('/')[1].split('.')[0])
		if plaintext:
			table += msg
		else:
			table += '<tr><td colspan="4" class="error">' + msg + '</td></tr>'
	logfile.close()
	return totals, table

# Display a log of recent transactions
def show_logs(parameters, plaintext=False):
	if 'date' not in parameters:
		date = datetime.date.today().isoformat()
	else:
		date = parameters['date'][0]
	# Process the current and calculate next and previous date
	days = []
	# Day scope
	if len(date) == 10:
		d = datetime.datetime.strptime(date, '%Y-%m-%d')
		delta = datetime.timedelta(1)
		next_date = (d + delta).date().isoformat()
		prev_date = (d - delta).date().isoformat()
		tag_s = 'W'
		scope_s = '%s-W%s' % d.isocalendar()[0:2]
		tag_m = 'M'
		scope_m = '%s-%s' % (d.year, str(d.month).zfill(2))
		tag_l = 'Y'
		scope_l = str(d.year)
		days = [date]
	# Week scope
	elif len(date) == 8:
		# Convert ISO week to Python date
		_year = int(date[0:4])
		_week = int(date[6:8])
		ref_date = datetime.date(_year, 1, 4)
		ref_week, ref_day = ref_date.isocalendar()[1:3]
		d = (ref_date + datetime.timedelta(days=1-ref_day, weeks=_week-ref_week))
		# Calculate offsets
		delta = datetime.timedelta(7)
		next_date = '%s-W%02d' % (d + delta).isocalendar()[0:2]
		prev_date = '%s-W%02d' % (d - delta).isocalendar()[0:2]
		tag_s = 'D'
		scope_s = (d + datetime.timedelta(3)).isoformat()
		tag_m = 'M'
		scope_m = '%s-%s' % (d.year, str(d.month).zfill(2))
		tag_l = 'Y'
		scope_l = str(d.year)
		# Populate date list
		for i in range(7):
			days.append((d + datetime.timedelta(i - config['week_start'])).isoformat())
		#print('range {start} to {end}'.format(start=days[0], end=days[6]))
	# Month scope
	elif len(date) == 7:
		d = datetime.datetime.strptime(date, '%Y-%m')
		if d.month == 12:
			year, month = d.year + 1, 1
		else:
			year, month = d.year, d.month + 1
		next_date = '%s-%s' % (year, str(month).zfill(2))
		if d.month == 1:
			year, month = d.year - 1, 12
		else:
			year, month = d.year, d.month - 1
		prev_date = '%s-%s' % (year, str(month).zfill(2))
		tag_s = 'D'
		scope_s = '%s-%s-15' % (d.year, str(d.month).zfill(2))
		tag_m = 'W'
		scope_m = '%s-W%02d' % (d + datetime.timedelta(15)).isocalendar()[0:2]
		tag_l = 'Y'
		scope_l = str(d.year)
		# Populate date list
		_date = datetime.date(d.year, d.month, 1)
		while _date.month == d.month:
			days.append(_date.isoformat())
			_date += datetime.timedelta(1)
	# Year scope
	elif len(date) == 4:
		d = datetime.datetime.strptime(date, '%Y')
		next_date = str(d.year + 1)
		prev_date = str(d.year - 1)
		tag_s = 'D'
		scope_s = '%s-06-15' % d.year
		tag_m = 'W'
		scope_m = '%s-W26' % d.year
		tag_l = 'M'
		scope_l = '%s-06' % d.year
		# Populate date list
		_date = datetime.date(d.year, 1, 1)
		while _date.year == d.year:
			days.append(_date.isoformat())
			_date += datetime.timedelta(1)
	else:
		raise ValueError
	# Create a transaction table and calculate totals
	if plaintext:
		page = '===== Summary for {date} ====='.format(date=date)
	else:
		page = load_file('logs.html')
	table = ''
	table_head = ''
	table_foot = ''
	summary = ''
	totals = {}
	# Compile transaction table and calculate date totals
	for _date in days:
		_totals, _table = read_log_file(os.path.join('logs', _date + '.log'), plaintext)
		table += _table
		for k in _totals.keys():
			if k in totals:
				totals[k] += _totals[k]
			else:
				totals[k] = _totals[k]
	for sign in totals.keys():
		if totals[sign] != 0:
			if plaintext:
				chunk = '{fiat} {cur}\n'
			else:
				chunk = '<p>{fiat} {cur}</p>\n'
			summary += chunk.format(fiat=bch.fiat(totals[sign]), cur=sign)
	# Format and return the logs page
	if table != '':
		token = 'BCH' if config['unit'] == 'native' else 'bits' if config['unit'] == 'bits' else 'satoshi'
		if plaintext:
			table_head = '====== Date =======||== Address ==||== Amount ({token}) ==||== Amount (fiat) ==||== ID =='.format(token=token)
		else:
			table_head = '<h2>Transactions:</h2>\n<table class="listing">\n<tr><th>Date and time</th><th>Address</th><th>Amount ({token})</th><th>Amount (fiat)</th><th>ID</th></tr>\n'.format(token=token)
			table_foot = '</table>\n'
	else:
		if plaintext:
			summary = 'No transactions.'
		else:
			summary = '<p>No transactions.</p>'
	if plaintext:
		return '\n'.join([page, summary, table_head, table])
	else:
		# Load print header and footer
		try:
			header = load_file('log_header.html')
		except (IOError, OSError, FileNotFoundError, PermissionError):
			header = ''
		try:
			footer = load_file('log_footer.html')
		except (IOError, OSError, FileNotFoundError, PermissionError):
			footer = ''
		table = table_head + table + table_foot
		# Pack the above variables into a filler dict
		params = {}
		_names = ['date', 'prev_date', 'tag_s', 'scope_s', 'tag_m', 'scope_m', 'tag_l', 'scope_l', 'next_date', 'header', 'summary', 'table', 'footer']
		for n in _names:
			params[n] = locals()[n]
		return page.format(**params)

# Main webapp function
def minipos(environ, start_response):
	error = '''<!doctype html>
<head>
<title>{err}</title>
</head>
<body>
<h1>{err}</h1>
</body>
</html>'''
	headers = [('Content-type', 'text/html; charset=UTF-8')]
	status = '200 OK'
	page = ''
	filler = ()
	if 'HTTP_X_REAL_IP' in environ:
		environ['REMOTE_ADDR'] = environ['HTTP_X_REAL_IP']
	ip_addr = environ['REMOTE_ADDR']
	subnet = '.'.join(ip_addr.split('.')[0:3]) + '.0'
	if '0.0.0.0' not in config['allowed_ips'] and ip_addr not in config['allowed_ips'] and subnet not in config['allowed_ips']:
		status = '403 Not Allowed'
		page = error.format(err=status)
		start_response(status, headers)
		return [page]
	request = environ['PATH_INFO'].lstrip('/').split('/')[-1]
	parameters = urllib.parse.parse_qs(environ['QUERY_STRING'])
	# Handle specific content-types
	if request == 'style.css':
		headers = [('Content-type', 'text/css')]
	elif request == 'scripts.js':
		headers = [('Content-type', 'text/javascript')]
	elif request.endswith('.png'):
		headers = [('Content-type', 'image/png')]
	elif request.endswith('.svg'):
		headers = [('Content-type', 'image/svg+xml')]
	elif request.endswith('.txt'):
		headers = [('Content-type', 'text/plain')]
	# Handle specific app pages
	elif request == 'invoice':
		try:
			page = create_invoice(parameters)
		except:
			if sys.exc_info()[0] is KeyError:
				print('Missing required GET argument: ' + str(sys.exc_info()[1]))
			else:
				print(sys.exc_info()[1])
			status = '400 Bad Request'
			page = error.format(err=status)
	elif request == 'check':
		page = check_payment(parameters)
		headers = [('Content-type', 'text/plain')]
	elif request == 'record':
		try:
			record_payment(parameters)
		except:
			if sys.exc_info()[0] is KeyError:
				print('Missing required GET argument: ' + str(sys.exc_info()[1]))
			else:
				print(sys.exc_info()[1])
			status = '400 Bad Request'
			page = error.format(err=status)
		else:
			headers = [('Content-type', 'text/plain')]
			page = '1'
	elif request == 'cancel':
		try:
			address = get_address_by_tag(parameters)
			if address:
				unlock_address(address)
		except:
			if sys.exc_info()[0] is KeyError:
				print('Missing required GET argument: ' + str(sys.exc_info()[1]))
			else:
				print(sys.exc_info()[1])
		status = '303 See Other\nLocation: request'
		page = 'Redirecting...'
	elif request == 'logs':
		try:
			page = show_logs(parameters)
		except:
			print(sys.exc_info()[1])
			status = '400 Bad Request'
			page = error.format(err=status)
	elif request == 'email':
		headers = [('Content-type', 'text/plain')]
		if 'email' not in config:
			print('Email not configured.')
			page = '0'
		elif sendmail.send(config, config['email'], '[MiniPOS] Transaction listing for ' + parameters['date'][0], show_logs(parameters, plaintext=True)):
			page = '1'
		else:
			page = '0'
	elif request == 'welcome':
		page = load_file('welcome.html')
	elif request == 'request':
		if len(config['currencies']) == 1:
			disabled = 'disabled'
		else:
			disabled = ''
		if config['taxrate'] < 0:
			tax = 'Discount'
		else:
			tax = 'Tax'
		filler = {
			'currencies': repr(config['currencies']),
			'timeout': config['welcome_timeout'],
			'disabled': disabled,
			'cur': config['currencies'][0],
			'tax': tax,
			'taxrate': config['taxrate'],
			'multiplier': config['multiplier']
		}
		page = load_file('request.html').format(**filler)
	# Redirect blank request to main page
	elif request == '':
		if config['welcome_timeout'] > 0:
			status = '303 See Other \nLocation: welcome'
		else:
			status = '303 See Other \nLocation: request'
		page = 'Redirecting...'
	# Load non-generated files from disk
	if page == '':
		try:
			page = load_file(os.path.join('assets', request))
		except:
			headers = [('Content-type', 'text/html; charset=UTF-8')]
			status = '404 Not Found'
			page = error.format(err=status)
			print(sys.exc_info()[1])
	# Serve the page
	start_response(status, headers)
	return [bytes(page, 'UTF-8')]

# Start the web server
random.seed()
httpd = make_server('', config['port'], minipos)
print('Serving minipos on port {port}...'.format(**config))
try:
	httpd.serve_forever()
except KeyboardInterrupt:
	print('Server stopped.')
